// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrackStatusMessage.proto

#ifndef PROTOBUF_TrackStatusMessage_2eproto__INCLUDED
#define PROTOBUF_TrackStatusMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SlotHub {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TrackStatusMessage_2eproto();
void protobuf_AssignDesc_TrackStatusMessage_2eproto();
void protobuf_ShutdownFile_TrackStatusMessage_2eproto();

class TrackStatusMessage;

// ===================================================================

class TrackStatusMessage : public ::google::protobuf::Message {
 public:
  TrackStatusMessage();
  virtual ~TrackStatusMessage();

  TrackStatusMessage(const TrackStatusMessage& from);

  inline TrackStatusMessage& operator=(const TrackStatusMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackStatusMessage& default_instance();

  void Swap(TrackStatusMessage* other);

  // implements Message ----------------------------------------------

  TrackStatusMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackStatusMessage& from);
  void MergeFrom(const TrackStatusMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 start_lights_status = 1;
  inline bool has_start_lights_status() const;
  inline void clear_start_lights_status();
  static const int kStartLightsStatusFieldNumber = 1;
  inline ::google::protobuf::int32 start_lights_status() const;
  inline void set_start_lights_status(::google::protobuf::int32 value);

  // required int32 fuel_mode = 2;
  inline bool has_fuel_mode() const;
  inline void clear_fuel_mode();
  static const int kFuelModeFieldNumber = 2;
  inline ::google::protobuf::int32 fuel_mode() const;
  inline void set_fuel_mode(::google::protobuf::int32 value);

  // required bool pitlane_installed = 3;
  inline bool has_pitlane_installed() const;
  inline void clear_pitlane_installed();
  static const int kPitlaneInstalledFieldNumber = 3;
  inline bool pitlane_installed() const;
  inline void set_pitlane_installed(bool value);

  // required bool lap_counter_installed = 4;
  inline bool has_lap_counter_installed() const;
  inline void clear_lap_counter_installed();
  static const int kLapCounterInstalledFieldNumber = 4;
  inline bool lap_counter_installed() const;
  inline void set_lap_counter_installed(bool value);

  // @@protoc_insertion_point(class_scope:SlotHub.TrackStatusMessage)
 private:
  inline void set_has_start_lights_status();
  inline void clear_has_start_lights_status();
  inline void set_has_fuel_mode();
  inline void clear_has_fuel_mode();
  inline void set_has_pitlane_installed();
  inline void clear_has_pitlane_installed();
  inline void set_has_lap_counter_installed();
  inline void clear_has_lap_counter_installed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 start_lights_status_;
  ::google::protobuf::int32 fuel_mode_;
  bool pitlane_installed_;
  bool lap_counter_installed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TrackStatusMessage_2eproto();
  friend void protobuf_AssignDesc_TrackStatusMessage_2eproto();
  friend void protobuf_ShutdownFile_TrackStatusMessage_2eproto();

  void InitAsDefaultInstance();
  static TrackStatusMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// TrackStatusMessage

// required int32 start_lights_status = 1;
inline bool TrackStatusMessage::has_start_lights_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackStatusMessage::set_has_start_lights_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackStatusMessage::clear_has_start_lights_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackStatusMessage::clear_start_lights_status() {
  start_lights_status_ = 0;
  clear_has_start_lights_status();
}
inline ::google::protobuf::int32 TrackStatusMessage::start_lights_status() const {
  return start_lights_status_;
}
inline void TrackStatusMessage::set_start_lights_status(::google::protobuf::int32 value) {
  set_has_start_lights_status();
  start_lights_status_ = value;
}

// required int32 fuel_mode = 2;
inline bool TrackStatusMessage::has_fuel_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackStatusMessage::set_has_fuel_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackStatusMessage::clear_has_fuel_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackStatusMessage::clear_fuel_mode() {
  fuel_mode_ = 0;
  clear_has_fuel_mode();
}
inline ::google::protobuf::int32 TrackStatusMessage::fuel_mode() const {
  return fuel_mode_;
}
inline void TrackStatusMessage::set_fuel_mode(::google::protobuf::int32 value) {
  set_has_fuel_mode();
  fuel_mode_ = value;
}

// required bool pitlane_installed = 3;
inline bool TrackStatusMessage::has_pitlane_installed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackStatusMessage::set_has_pitlane_installed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackStatusMessage::clear_has_pitlane_installed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackStatusMessage::clear_pitlane_installed() {
  pitlane_installed_ = false;
  clear_has_pitlane_installed();
}
inline bool TrackStatusMessage::pitlane_installed() const {
  return pitlane_installed_;
}
inline void TrackStatusMessage::set_pitlane_installed(bool value) {
  set_has_pitlane_installed();
  pitlane_installed_ = value;
}

// required bool lap_counter_installed = 4;
inline bool TrackStatusMessage::has_lap_counter_installed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrackStatusMessage::set_has_lap_counter_installed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrackStatusMessage::clear_has_lap_counter_installed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrackStatusMessage::clear_lap_counter_installed() {
  lap_counter_installed_ = false;
  clear_has_lap_counter_installed();
}
inline bool TrackStatusMessage::lap_counter_installed() const {
  return lap_counter_installed_;
}
inline void TrackStatusMessage::set_lap_counter_installed(bool value) {
  set_has_lap_counter_installed();
  lap_counter_installed_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SlotHub

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TrackStatusMessage_2eproto__INCLUDED
