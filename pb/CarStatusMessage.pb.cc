// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarStatusMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CarStatusMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SlotHub {

namespace {

const ::google::protobuf::Descriptor* CarStatusMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarStatusMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CarStatusMessage_2eproto() {
  protobuf_AddDesc_CarStatusMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CarStatusMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CarStatusMessage_descriptor_ = file->message_type(0);
  static const int CarStatusMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarStatusMessage, car_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarStatusMessage, current_laptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarStatusMessage, fastest_laptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarStatusMessage, laps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarStatusMessage, fuel_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarStatusMessage, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarStatusMessage, in_pit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarStatusMessage, pit_stops_),
  };
  CarStatusMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarStatusMessage_descriptor_,
      CarStatusMessage::default_instance_,
      CarStatusMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarStatusMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarStatusMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarStatusMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CarStatusMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarStatusMessage_descriptor_, &CarStatusMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CarStatusMessage_2eproto() {
  delete CarStatusMessage::default_instance_;
  delete CarStatusMessage_reflection_;
}

void protobuf_AddDesc_CarStatusMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026CarStatusMessage.proto\022\007SlotHub\"\256\001\n\020Ca"
    "rStatusMessage\022\022\n\ncar_number\030\001 \002(\005\022\027\n\017cu"
    "rrent_laptime\030\002 \002(\005\022\027\n\017fastest_laptime\030\003"
    " \002(\005\022\014\n\004laps\030\004 \002(\005\022\023\n\013fuel_status\030\005 \002(\005\022"
    "\016\n\006active\030\006 \002(\010\022\016\n\006in_pit\030\007 \002(\010\022\021\n\tpit_s"
    "tops\030\010 \002(\005", 210);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CarStatusMessage.proto", &protobuf_RegisterTypes);
  CarStatusMessage::default_instance_ = new CarStatusMessage();
  CarStatusMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CarStatusMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CarStatusMessage_2eproto {
  StaticDescriptorInitializer_CarStatusMessage_2eproto() {
    protobuf_AddDesc_CarStatusMessage_2eproto();
  }
} static_descriptor_initializer_CarStatusMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CarStatusMessage::kCarNumberFieldNumber;
const int CarStatusMessage::kCurrentLaptimeFieldNumber;
const int CarStatusMessage::kFastestLaptimeFieldNumber;
const int CarStatusMessage::kLapsFieldNumber;
const int CarStatusMessage::kFuelStatusFieldNumber;
const int CarStatusMessage::kActiveFieldNumber;
const int CarStatusMessage::kInPitFieldNumber;
const int CarStatusMessage::kPitStopsFieldNumber;
#endif  // !_MSC_VER

CarStatusMessage::CarStatusMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CarStatusMessage::InitAsDefaultInstance() {
}

CarStatusMessage::CarStatusMessage(const CarStatusMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CarStatusMessage::SharedCtor() {
  _cached_size_ = 0;
  car_number_ = 0;
  current_laptime_ = 0;
  fastest_laptime_ = 0;
  laps_ = 0;
  fuel_status_ = 0;
  active_ = false;
  in_pit_ = false;
  pit_stops_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarStatusMessage::~CarStatusMessage() {
  SharedDtor();
}

void CarStatusMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CarStatusMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarStatusMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarStatusMessage_descriptor_;
}

const CarStatusMessage& CarStatusMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarStatusMessage_2eproto();
  return *default_instance_;
}

CarStatusMessage* CarStatusMessage::default_instance_ = NULL;

CarStatusMessage* CarStatusMessage::New() const {
  return new CarStatusMessage;
}

void CarStatusMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    car_number_ = 0;
    current_laptime_ = 0;
    fastest_laptime_ = 0;
    laps_ = 0;
    fuel_status_ = 0;
    active_ = false;
    in_pit_ = false;
    pit_stops_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarStatusMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 car_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &car_number_)));
          set_has_car_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_laptime;
        break;
      }

      // required int32 current_laptime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_laptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_laptime_)));
          set_has_current_laptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fastest_laptime;
        break;
      }

      // required int32 fastest_laptime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fastest_laptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fastest_laptime_)));
          set_has_fastest_laptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_laps;
        break;
      }

      // required int32 laps = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laps_)));
          set_has_laps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fuel_status;
        break;
      }

      // required int32 fuel_status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fuel_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fuel_status_)));
          set_has_fuel_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_active;
        break;
      }

      // required bool active = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_in_pit;
        break;
      }

      // required bool in_pit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_pit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_pit_)));
          set_has_in_pit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pit_stops;
        break;
      }

      // required int32 pit_stops = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pit_stops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pit_stops_)));
          set_has_pit_stops();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CarStatusMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 car_number = 1;
  if (has_car_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->car_number(), output);
  }

  // required int32 current_laptime = 2;
  if (has_current_laptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_laptime(), output);
  }

  // required int32 fastest_laptime = 3;
  if (has_fastest_laptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fastest_laptime(), output);
  }

  // required int32 laps = 4;
  if (has_laps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->laps(), output);
  }

  // required int32 fuel_status = 5;
  if (has_fuel_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fuel_status(), output);
  }

  // required bool active = 6;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->active(), output);
  }

  // required bool in_pit = 7;
  if (has_in_pit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->in_pit(), output);
  }

  // required int32 pit_stops = 8;
  if (has_pit_stops()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pit_stops(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CarStatusMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 car_number = 1;
  if (has_car_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->car_number(), target);
  }

  // required int32 current_laptime = 2;
  if (has_current_laptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_laptime(), target);
  }

  // required int32 fastest_laptime = 3;
  if (has_fastest_laptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fastest_laptime(), target);
  }

  // required int32 laps = 4;
  if (has_laps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->laps(), target);
  }

  // required int32 fuel_status = 5;
  if (has_fuel_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fuel_status(), target);
  }

  // required bool active = 6;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->active(), target);
  }

  // required bool in_pit = 7;
  if (has_in_pit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->in_pit(), target);
  }

  // required int32 pit_stops = 8;
  if (has_pit_stops()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pit_stops(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CarStatusMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 car_number = 1;
    if (has_car_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->car_number());
    }

    // required int32 current_laptime = 2;
    if (has_current_laptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_laptime());
    }

    // required int32 fastest_laptime = 3;
    if (has_fastest_laptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fastest_laptime());
    }

    // required int32 laps = 4;
    if (has_laps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laps());
    }

    // required int32 fuel_status = 5;
    if (has_fuel_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fuel_status());
    }

    // required bool active = 6;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // required bool in_pit = 7;
    if (has_in_pit()) {
      total_size += 1 + 1;
    }

    // required int32 pit_stops = 8;
    if (has_pit_stops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pit_stops());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarStatusMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarStatusMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarStatusMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarStatusMessage::MergeFrom(const CarStatusMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_car_number()) {
      set_car_number(from.car_number());
    }
    if (from.has_current_laptime()) {
      set_current_laptime(from.current_laptime());
    }
    if (from.has_fastest_laptime()) {
      set_fastest_laptime(from.fastest_laptime());
    }
    if (from.has_laps()) {
      set_laps(from.laps());
    }
    if (from.has_fuel_status()) {
      set_fuel_status(from.fuel_status());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_in_pit()) {
      set_in_pit(from.in_pit());
    }
    if (from.has_pit_stops()) {
      set_pit_stops(from.pit_stops());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarStatusMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarStatusMessage::CopyFrom(const CarStatusMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarStatusMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void CarStatusMessage::Swap(CarStatusMessage* other) {
  if (other != this) {
    std::swap(car_number_, other->car_number_);
    std::swap(current_laptime_, other->current_laptime_);
    std::swap(fastest_laptime_, other->fastest_laptime_);
    std::swap(laps_, other->laps_);
    std::swap(fuel_status_, other->fuel_status_);
    std::swap(active_, other->active_);
    std::swap(in_pit_, other->in_pit_);
    std::swap(pit_stops_, other->pit_stops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarStatusMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarStatusMessage_descriptor_;
  metadata.reflection = CarStatusMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SlotHub

// @@protoc_insertion_point(global_scope)
